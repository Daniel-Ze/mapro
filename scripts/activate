#!/bin/bash

# Move to indicated project directory or simply edit NOTES.md / TODO.md from
# indicated project

R='\033[0;31m'
G='\033[0;32m'
Y='\033[0;33m'
B='\033[0;34m'
NC='\033[0m'

info=${Y}"   [info]"${NC}
error=${R}"  [error]"${NC}
warn=${Y}"[warning]"${NC}

CHECK=${G}'\xE2\x9C\x94'${NC}

DB_FILE=$HOME"/.projects.db"
RC_FILE=$(dirname $(readlink -f "$0"))"/.bashrc_mapro"
BASH_PROFILE=$HOME"/.bash_profile"
BASHRC=$HOME"/.bashrc"

helpFunction() {
    echo ""
    echo -e "This script let's you edit your projects data."
    echo ""
    echo -e "Usage: ${G}$(basename -- "$0")${NC} -p <project name>"
	echo -e "\t-p / -u: project name / project UID"
	echo -e "\t-n: open project NOTES.md for editing"
	echo -e "\t-t: open project TODO.md for editing"
	echo -e "\t-d: cd into project directory"
	echo -e "\t-e: change the editor <vim | nano>"
    echo ""
    exit 0
}

intializeConfig() {
	read -p "Which default editor (vim, nano)? " editor
	if [ $editor = "vim" ] || [ $editor = "nano" ]; then
		SQL_CREATE_TABLE="CREATE TABLE config (
    	                    version TEXT NOT NULL,
    	                    editor TEXT NOT NULL,
			    status TEXT NOT NULL
    	                );"
		SQL_WRITE_TO_TABLE="INSERT INTO config (
							  version,
							  editor,
							  status
							) VALUES (
							  'version 0.01alpha',
							  '$editor',
							  'current'
							);"
		sqlite3 "$DB_FILE" "$SQL_CREATE_TABLE"
		sqlite3 "$DB_FILE" "$SQL_WRITE_TO_TABLE"
	else
		echo -e "$error\tPlease chose nano or vim."
	fi
}	

changeDirectory() {

	if [[ -n $parameterP ]] && [[ ! -n $parameterU ]]; 
	then

		project_entry=$(sqlite3 "$DB_FILE" "SELECT * FROM projects WHERE name = '$1';")
	elif [[ -n $parameterU ]] && [[ ! -n $parameterP ]];
	then

		project_entry=$(sqlite3 "$DB_FILE" "SELECT * FROM projects WHERE uid = '$1';")
	fi

	dir=$(echo $project_entry | cut -f5 -d '|')
	name=$(echo $project_entry | cut -f2 -d '|')
	uid=$(echo $project_entry | cut -f1 -d '|')

    if [ ! -d "$dir" ]; then
        echo -e "$error\tProject directory '$dir' not found."
        exit 1
    fi
	if [ -e $BASH_PROFILE ] && [ ! -e $BASHRC ]; then
		cat $BASH_PROFILE > $RC_FILE
	elif [ ! -e $BASH_PROFILE ] && [ -e $BASHRC ]; then
		cat $BASHRC > $RC_FILE
	else
		echo -e "$warn\tNo ~/.bash_profile or ~/.bashrc. The subshell might not have all functionality."
	fi

	echo '# mapro env variables >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>' >> $RC_FILE
	echo 'export PS1="(Project: '$name') \[\e[0;93m\] mapro\[\e[m\] \W : "' >> $RC_FILE
	echo 'export MAPRO_PROJECT_UID="'$uid'"' >> $RC_FILE
	echo 'export MAPRO_PROJECT_NAME="'$parameterP'"' >> $RC_FILE
	echo 'export MAPRO_PROJECT_LOCACTION="'$dir'"' >> $RC_FILE

    cd "$dir" 
	echo -e "       =============================================================="
    echo -e "$info  mapro activated a subshell in project folder."
	echo -e "$info  You are now in: $PWD"
	echo -e "$info  Exit subshell with 'CTRL + D' or type 'exit'"
	echo -e "       =============================================================="
	exec bash --rcfile $RC_FILE
}

exists=$(sqlite3 "$DB_FILE" "SELECT count(*) FROM sqlite_master WHERE type='table' AND name='config';")

if [ "$exists" -eq 0 ]; then
	echo -e ""
    echo -e "$warn\tThe config table does not exist in the database." \
			"Creating it now."
	echo -e "$warn\tThis should happen only once."
	echo -e ""
	intializeConfig
fi

take_notes=false
take_todo=false

# Parse input
while getopts "hp:u:ntde" opt
do
    case "$opt" in
        p ) 
            parameterP="${OPTARG}"
			SQL_QUERY="SELECT * FROM projects WHERE name = '$parameterP';"
            ;;
		u )
			parameterU="${OPTARG}"
			SQL_QUERY="SELECT * FROM projects WHERE uid = '$parameterU';"
			;;
		e )
			parameterE="${OPTARG}"
			editor=$(sqlite3 $DB_FILE "SELECT editor FROM config;")
			if [[ -n $editor ]];
			then
				echo -e "$info\tCurrent editor $editor. Want to change?"
				read -p "Change editor (y/n) " answer
				if [[ $answer =~ ^[Yy]$ ]];
				then
					read -p "Enter your editor of choice: " editor_new
					sqlite3 $DB_FILE "UPDATE config SET editor = '$editor_new' WHERE editor = '$editor';"
					echo -e "$info\tNew editor: $editor_new"
				fi
			fi
			exit 0
			;;
		d )
			if [[ -n $parameterP ]] && [[ ! -n $parameterU ]];
			then
				changeDirectory "$parameterP"
			elif [[ -n $parameterU ]] && [[ ! -n $parameterP ]];
			then
				changeDirectory "$parameterU"
			fi
			;;
		n )
			project_entry=$(sqlite3 "$DB_FILE" "$SQL_QUERY")
			dir=$(echo $project_entry | cut -f5 -d '|')
			editor=$(sqlite3 "$DB_FILE" "SELECT editor FROM config;")
			notes=$dir"NOTES.md"
			$editor $notes
			;;
		t )
			project_entry=$(sqlite3 "$DB_FILE" "$SQL_QUERY")
			dir=$(echo $project_entry | cut -f5 -d '|')
			todo=$dir"TODO.md"
			vim $todo
			;;
        h )
            helpFunction
            ;;
        * ) 
            helpFunction
            ;;
        ? ) 
            helpFunction
            ;;
    esac
done

if [ $OPTIND -eq 1 ]
then
    helpFunction
fi
