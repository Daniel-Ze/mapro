#!/bin/bash

# Bash script that renames a project that was created with
# "create_project"

R='\033[0;31m'
G='\033[0;32m'
Y='\033[0;33m'
B='\033[0;34m'
NC='\033[0m'

info=${Y}" [info]"${NC}
error=${R}"[error]"${NC}

CHECK=${G}'\xE2\x9C\x94'${NC}

# Database for projects
DB_FILE=$HOME"/.projects.db"


helpFunction() {
	# Function to print the usage and quit
	
	echo ""
    	echo -e "This script will edit a project. This includes renaming,"
	echo -e "moving to new directory and changing the status"
    	echo ""
    	echo -e "Usage: ${G}$(basename -- "$0")${NC} -p / -u <project_name> / <uid>" \
			" -n <new_project_name>"
	echo -e "Usage: ${G}$(basename -- "$0")${NC} -p / -u <project_name> / <uid>" \
			" -m </path/to/new/location>"
	echo -e "Usage: ${G}$(basename -- "$0")${NC} -p / -u <project_name> / <uid>" \
			" -s <active | complete | suspended>"
	echo -e "Usage: ${G}$(basename -- "$0")${NC} -p / -u <project_name> / <uid>" \
			" -c <html | pdf>"
	echo -e "\t-p/-u: Project name / Project uid to be edited."
	echo -e "\t-n: New project name (no spaces allowed)"
	echo -e "\t-m: New project location (no spaces allowed)"
	echo -e "\t-s: Change the project status (active, complete, suspended)"
	echo -e "\t-d: Dry running to see whats about to happen."
	echo -e "\t-c: Convert NOTES.md and README.md to <pdf|html> (requires pandoc)"
    echo ""
    exit 0
}


pandocConvert() {
	# Function to convert NOTES.md to README.md to either pdf or html 
	
	project_entry=$(sqlite3 "$DB_FILE" "$SQL_QUERY")
	dir=$(echo $project_entry | cut -f5 -d '|')
	name=$(echo $project_entry | cut -f2 -d '|')

	echo -e "$info\tConverting NOTES.md and README.md of project ${B}$name${NC} to $parameterC."
	cd $dir

	# NOTES.md
	pandoc -V geometry:margin=2cm \
		-s \
		--highlight-style=tango \
		--metadata title="NOTES: $name" \
		-f markdown \
		-t $parameterC \
		-o $dir"/NOTES."$parameterC $dir"/NOTES.md"

	# README.md
	pandoc -V geometry:margin=2cm \
		-s \
		--highlight-style=tango \
		--metadata title="README: $name" \
		-f markdown \
		-t $parameterC \
		-o $dir"/README."$parameterC $dir"/README.md"
	exit 0
}


# Input check
parameterD=false
rename=false
move=false
status=false
project_name=false
project_uid=false
convert_pdf=false
convert_html=false


# Parse the commandline input
while getopts "c:p:u:n:m:s:dh" opt
do
    case "$opt" in
		c ) 
    			if ! which pandoc > /dev/null; then
	   			echo -e "$error\tPandoc required but not found in path."
				exit 1
    			else
	    			parameterC="$OPTARG"
				if [ $parameterC = "pdf" ]; then	
					convert_pdf=true
				elif [ $parameterC = "html" ]; then
					convert_html=true
				else
					echo -e "$error\t$parameterC conversion not supported."
				exit 1
				fi
    			fi
			;;
		p )
			parameterP="$OPTARG"
			read -a array <<< $(sqlite3 "$DB_FILE" "SELECT name FROM projects WHERE name = '$parameterP';")
			declare -a count
			for item in "${array[@]}"; do
				((count[$item]++))
			done
			if [ ! ${count[0]} = 1 ];then
				echo -e "$error\tThere are multiple projects in the database" \
		 			"with the name $parameterP. Try using the 'uid'."
				exit 1
			fi
			project_name=true
			;;
		u )
			parameterU="$OPTARG"
			project_uid=true
			;;
		m )
			parameterM="$OPTARG"
			move=true
			;;
		n )
			parameterN="$OPTARG"
			rename=true
			;;
		d )
			parameterD="true"
			;;
		s )
			parameterS="$OPTARG"
			status=true
			;;
		h ) 
			helpFunction
            			;;
		\? ) 
			echo "Invalid option: -$OPTARG" 
			helpFunction
      		;;
    esac
done


# Check if something was parsed from the commandline
if [ $OPTIND -eq 1 ];
then
    helpFunction
fi


# Check if project name or uid was given
if [[ ! -n $parameterP ]] && [[ ! -n $parameterU ]];
then
	if [[ ! -n $MAPRO_PROJECT_NAME ]] && [[ ! -n $MAPRO_PROJECT_UID ]];
	then
		echo -e "$error\tEither project name or uid needed."
		exit 1
	elif [[ -n $MAPRO_PROJECT_NAME ]];
	then
		parameterP=$MAPRO_PROJECT_NAME
	elif [[ -n $MAPRO_PROJECT_UID ]];
	then
		parameterU=$MAPRO_PROJECT_UID
	fi
fi


# If a project name was given check if it exists and get its uid
if [[ -n $parameterP ]]; 
then
	check_db_p=$(sqlite3 "$DB_FILE" "SELECT uid FROM projects WHERE name = '$parameterP';")
	SQL_QUERY="SELECT * FROM projects WHERE uid = '$check_db_p';"
	if [[ ! -n "$check_db_p" ]]; 
	then
		echo -e "$error\tProject does not exist. Quitting."
		exit 1
	fi
fi


# If a project uid was given check if it exists
if [[ -n $parameterU ]];
then
	check_db_u=$(sqlite3 "$DB_FILE" "SELECT uid FROM projects WHERE uid = '$parameterU';")
	SQL_QUERY="SELECT * FROM projects WHERE uid = '$check_db_u';"
	if [[ ! -n "$check_db_u" ]]; 
	then
		echo -e "$error\tProject does not exist. Quitting."
		exit 1
	fi
fi


# Rename a project
if [[ "$rename" = true ]]; 
then
	while read l; 
	do 
		project=$(echo $l | cut -f2 -d'|')
		dir=$(echo $l | cut -f5 -d'|')
		
		if ! git -C $dir diff --exit-code > /dev/null;
		then
			echo -e "$error\tProject has uncommitted changes. Please run:"
			echo -e "$error\t\tgit -C <dir> add ."
			echo -e "$error\t\tgit -C <dir> commit '<message>'"
			echo -e "$error\tQuitting."
			exit 1
		else
			new_dir=$(dirname $dir)"/"$parameterN"/"
			if [[ $parameterD == "true" ]];
			then
				echo -e "${Y}Dry-run, the following will be executed when" \
				        "running without -d${NC}\n"

				echo -e "$info\tOld dir: $dir"
				echo -e "$info\tNew dir: $new_dir\n"
				if [ $project_name = true ]; then
				echo -e "$info\tCommand: ${G}sqlite3${NC} $DB_FILE \"UPDATE" \
						"projects SET name = '$parameterN', location = " \
						"'$new_dir' WHERE uid = '$check_db_p';\""
				elif [ $project_uid = true ]; then
				echo -e "$info\tCommand: ${G}sqlite3${NC} $DB_FILE \"UPDATE" \
						"projects SET name = '$parameterN', location = " \
						"'$new_dir' WHERE uid = '$check_db_u';\""
				fi
				echo -e "$info\tCommand: ${G}mv${NC} $dir $new_dir" 
				echo -e "$info\tCommand: ${G}echo${NC} \"old_name: " \
						"$parameterP\" >> $new_dir.project_status"

				echo -e "$info\tCommand: ${G}echo${NC} \"  change_date: " \
						"$(date +"%Y-%m-%d %T")\" >> $new_dir.project_status"
				exit 0
			else
				echo -e "$info\tRenaming and moving for real"
				echo -e "$info\tOld dir: $dir"
				echo -e "$info\tNew dir: $new_dir"
				if [ $project_name = true ]; then
					sqlite3 $DB_FILE "UPDATE projects SET name = '$parameterN', location = '$new_dir' WHERE uid = '$check_db_p';"
				elif [ $project_uid = true ]; then
					sqlite3 $DB_FILE "UPDATE projects SET name = '$parameterN', location = '$new_dir' WHERE uid = '$check_db_u';"
				fi
				mv $dir $new_dir

				echo "old_name: $parameterP" >> $new_dir".project_status"

				echo "  change_date: $(date +"%Y-%m-%d %T")" >> \
					$new_dir".project_status"
			fi
		fi
	done < <(sqlite3 "$DB_FILE" "$SQL_QUERY")
	echo -e "$info\tFinished renaming. $CHECK"
	exit 0
fi


# Move a project
if [[ $move = true ]];
then
	project_entry=$(sqlite3 "$DB_FILE" "$SQL_QUERY")
	name=$(echo $project_entry | cut -f2 -d "|")
	dir=$(echo $project_entry | cut -f5 -d "|")
	uid=$(echo $project_entry | cut -f1 -d "|")
	
	if [[ -d $parameterM ]] && [[ "$(dirname $dir)/" = "$parameterM" ]];
	then
		echo -e "$info\tNothing to do. $name is already in $parameterM."
	elif [[ -d $parameterM ]] && [[ ! -d ${parameterM}${name} ]];
	then
		echo -e "$info\tMoving $name from $dir to $parameterM."
		echo "old_location: $dir" >> ${dir}".project_status"
		echo "new_location:" >> ${dir}".project_status"
		echo "  - ${parameterM}${name}" >> ${dir}".project_status"
		echo "  - $(date +"%Y-%m-%d %T")" >> ${dir}".project_status"
		mv $dir $parameterM
		sqlite3 "$DB_FILE" "UPDATE projects SET location = '${parameterM}${name}/' WHERE uid = '$uid'"
	elif [[ ! -d $parameterM ]];
	then
		echo -e "$error\t$parameterM destination does not exist."
	else
		echo -e "$error\tSomething went wrong with the supplied path."
	fi	
fi	


# Change the status of a prohect
if [[ -n $parameterS ]] && [[ $parameterS = "active" ]] || \
	[[ $parameterS = "complete" ]] || \
	[[ $parameterS = "suspended" ]];
then
	while read l; 
	do 
		project=$(echo $l | cut -f2 -d'|')
		dir=$(echo $l | cut -f5 -d'|')
		current_status=$(echo $l | cut -f6 -d'|')
		
		if ! git -C $dir diff --exit-code > /dev/null;
		then
			echo -e "$error\tProject has uncommitted changes. Please run:"
			echo -e "$error\t\tgit -C <dir> add ."
			echo -e "$error\t\tgit -C <dir> commit '<message>'"
			echo -e "$error\tQuitting."
			exit 1
		else
			# Check the current status
			if [ $parameterS = $current_status ];
			then
				# If the same supplied with -s nothing to do
				echo -e "$info\tProject already marked as" \
						"${G}$parameterS${NC}. Nothing to do. $CHECK"
				exit 0
			fi
			# Check which status was supplied and do the things
			case $parameterS in
				# Change to active; nothing much to do
				active )
					echo -e "$info\tProject status will change from" \
							"$current_status to ${G}$parameterS${NC}"
					sqlite3 $DB_FILE "UPDATE projects SET status = '$parameterS' WHERE name = '$parameterP';"
					;;
				
				# Change to complete:
				#  - changes status to complete
				#  - adds a directory final with a .tar.gz file of all files
				#  - creates an immutable git snapshot
				complete )
					echo -e "$info\tProject status will change from" \
							"$current_status to ${G}$parameterS${NC}"
					echo -e "$info\tA immutable snapshot of the project" \
							"will be created with git as well as a" \
							".tar.gz archive in the folder final"
					
					# Make the "final" dir
					if [ ! -d $dir"final/" ]; 
					then
						mkdir $dir"final/"
					fi

					cd $dir

					# Create the ".tar.gz" archive
					tar -czvf final/$project"_final.tar.gz" .
					git tag -a $project"_final" -m "A immutable snapshot of the finished project folder."

					# Change the status in the database
					sqlite3 $DB_FILE "UPDATE projects SET status = '$parameterS' WHERE name = '$project';"

					# Change the status in the .project_status 
					sed -i 's/active/complete/g' .project_status
					;;
				
				# Change to status to suspended; experimental
				suspended )
					echo -e "$info\tProject status will change from" \
							"$current_status to ${G}$parameterS${NC}"
					
					;;
			esac
		fi
	done < <(sqlite3 "$DB_FILE" "$SQL_QUERY")
	echo -e "$info\tFinished changing status. $CHECK"
	exit 0
fi


# Convert the NOTES.md and README.md file to html / pdf
if [ $convert_html = true ] || [ $convert_pdf = true ];
then
	pandocConvert
fi
